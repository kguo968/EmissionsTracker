source("library.R")
source("helper.R")

# Import all emissions data and store as single data frame
if (!file.exists("emissions.rda")) {
  getSheet()
}

load(file = "emissions.rda")

# Manually replace NA Layer in hierarchy value with correct value (checked in excel sheet)
emissions$`Layer in hierarchy` <-
  replace_na(emissions$`Layer in hierarchy`, 6)

emissions$`Link to CRF import file`[emissions$`Link to CRF import file` == "1.AA"] <-
  "1.A"
emissions$`Name on tab`[emissions$`Name on tab` == "[1.AA  Fuel Combustion - Sectoral approach]"] <-
  "[1.A  Fuel Combustion - Sectoral approach]"

# Fix naming scheme for Agriculture --> Livestock (main emissions dataframe)
emissions <- fixAgricultureEmissions(emissions)

# Get initial year (2018)
emission_year <- emissions %>%
  filter(Year == 2018)

# Extract summary information
summary_emission <- emission_year %>%
  filter(`Layer in hierarchy` == 1) %>%
  getSummary() %>%
  StartEnd()

# Import time series data
time_series_data <-
  read_xlsx("Data/emissions data.xlsx", range = "A11:AF1072")[-c(178:261, 300:325, 539, 1053:1056),]

time_series_data[4, 1] <- "1.A"
time_series_data[4, 2] <-
  "[1.A  Fuel Combustion - Sectoral approach]"

# Fix naming scheme for Agriculture --> Livestock (time series)
time_series_data <- fixAgricultureTime(time_series_data)

# Reformat and clean time series data
time_series_summary <-
  timeSummary(time_series_data)    # Summary of total emissions
time_series_clean <-
  cleanSheet(time_series_data)   # Time series breakdown of individual components

# Get GHG data frame
total_ghg <- getGHG(summary_emission)

# Define global variable to track current year
currentYear <<- 2018

# Define UI for application that draws a histogram
ui <- fluidPage(
  # Adjust style of the shiny app
  # setBackgroundColor('#000030'),
  
  tags$head(tags$style(
    HTML("
        body{
            font-family: 'Lato';
            color: #1b556b;
        }
    ")
  )),
  
  # Adjusting the style of the hover output
  # Below javascript code found from https://stackoverflow.com/questions/38917101/how-do-i-show-the-y-value-on-tooltip-while-hover-in-ggplot2
  tags$head(tags$style(
    '
        #toolTip {
              position: absolute;
              width: 125px;
         }
    '
  )),
  
  # CSS for the hover output
  tags$script(
    '
    $(document).ready(function() {
      // id of the plot
      $("#Emissions").mousemove(function(e) {

        // ID of uiOutput
        $("#toolTip").show();
        $("#toolTip").css({
          top: (e.pageY + 5) + "px",
          left: (e.pageX + 5) + "px"
        });
      });
    });
    '
  ),
  
  
  # Application title
  titlePanel("New Zealand's Interactive Emissions Tracker"),
  
  # Main panel with the emissions graph
  fluidRow(
    column(
      width = 8,
      radioButtons(
        "plotType",
        "Choose Plot Type",
        c("Graph View", "Table View"),
        selected = "Graph View",
        inline = TRUE
      ),
      conditionalPanel(
        'input.plotType == "Table View"',
        selectInput(
          'YearComp',
          label = "Year to Compare",
          choices = time_series_summary$Year,
          selected = time_series_summary$Year[1]
        )
      ),
      conditionalPanel(
        'input.plotType == "Graph View"',
        plotOutput(
          'Emissions',
          height = "800px",
          click = "Emissions_click",
          hover = "Emissions_hover"
        )
      ),
      conditionalPanel('input.plotType == "Table View"',
                       DTOutput('DataFrame')),
      fluidRow(
        column(width = 1,
               actionButton("LevelUp",
                            "Go up")),
        column(width = 1,
               actionButton("Reset_Sector",
                            "Reset")),
        column(width = 10,
               uiOutput("Sector_trace")),
        uiOutput("toolTip")
      )
    ),
    
    # Side panel with the year and GHG graphs
    column(
      width = 4,
      fluidRow(
        uiOutput("Year_value"),
        plotOutput('Year',
                   click = "Year_click"),
      ),
      fluidRow(
        column(width = 8,
               uiOutput("GHG_selected")),
        column(width = 4,
               actionButton("Reset_GHG",
                            "Reset")),
        plotOutput('GHG',
                   click = "GHG_click")
      )
    )
  )
)

# Define server logic required to draw a histogram
server <- function(input, output, session) {
  # reactiveValues and reactiveVal ------------------------------------------
 
  # Provide all required reactiveValues
  Emission_year <- reactiveValues(data = emission_year)
  
  Sector_Frame <- reactiveValues(data = NULL)
  
  Category_Selector <-
    reactiveValues(selected = NULL,
                   previous = vector(),
                   sector = NULL)
  
  Year_Selector <- reactiveValues(selected = NULL,
                                  toHighlight = c(rep(FALSE, dim(
                                    time_series_summary
                                  )[1] - 1), TRUE))
  
  check <- reactiveValues(value = NULL)
  
  GHG_Selector <- reactiveValues(selected = vector(),
                                 toHighlight = rep(TRUE, length(total_ghg$Gas)))
  
  Current_Summary <- reactiveValues(summary = summary_emission)
  
  gross <- reactiveValues(value = sum(summary_emission[summary_emission$Totals > 0, ]$Totals))
  
  Comparison_Frame <- reactiveValues(data = NULL)
  
  # reactiveVal for tracking levels
  level <- reactiveVal(0)
  
  # observeEvent ------------------------------------------------------------
  
  # Assign name based on selected bar input
  observeEvent(input$Emissions_click, {
    if (level() == 0) {
      # Obtain and assign selected bar
      Category_Selector$selected <-
        summary_emission$Sector[round(input$Emissions_click$x)]
      
      # Update dataframe based on selected sector
      Sector_Frame$data <- Emission_year$data %>%
        filter(Sector == as.character(Category_Selector$selected))
      
      Category_Selector$sector <-
        as.character(Category_Selector$selected)
      
      # Increment level
      level(level() + 1)
    } else {
      # Determine if 'check' has a value or not
      if (is.null(check$value)) {
        # Filter for sector using only layer in hierarchy if not
        sector_level <- Sector_Frame$data %>%
          filter(`Layer in hierarchy` == (level() + 1))
      } else {
        # Filter for sector using layer in hierarchy and link to crf import file
        sector_level <- Sector_Frame$data %>%
          filter(`Layer in hierarchy` == (level() + 1))
        
        sector_level <-
          sector_level[str_detect(sector_level[, 1], check$value),]
      }
      
      if (!all(!duplicated(sector_level$`Name on tab`))) {
        # Re-determine sector_level dataframe if there are duplicate `Name on tab` entries
        sector_level <-
          Sector_Frame$data[Sector_Frame$data[[10]] == isolate(level()) + 1 &
                              substr(Sector_Frame$data[[1]],
                                     1,
                                     stri_locate_first_fixed(Sector_Frame$data[[1]], " ") - 1) %in% check$value, ]
      }
      
      # Reorder sector_level such that it's sorted alphabetically (consistent with ggplot ordering)
      if (!all(sector_level$Totals > 0)) {
        sector_level <- sector_level %>%
          changeOrder()
      } else {
        sector_level <- sector_level %>%
          dplyr::arrange(`Link to CRF import file`)
      }
      
      # Update previously selected and currently selected categories only if not on lowest level
      if (sector_level[sector_level$`Name on tab` == sector_level$`Name on tab`[round(input$Emissions_click$x)], ]$`Lowest level?` != "lowest") {
        Category_Selector$previous <-
          c(Category_Selector$previous,
            as.character(Category_Selector$selected))
        Category_Selector$selected <-
          sector_level$`Name on tab`[round(input$Emissions_click$x)]
        
        # Increment level
        level(level() + 1)
      }
    }
    
  }, priority = 1)
  
  # Observe event for changing year
  observeEvent(input$Year_click, {
    # Update Year_Selector values
    Year_Selector$selected <- round(input$Year_click$x)
    Year_Selector$toHighlight <-
      time_series_summary$Year %in% Year_Selector$selected
  })
  
  # Go back up a level
  observeEvent(input$LevelUp, {
    # Only able to go up a level if we're not at the base level
    if (level() > 0) {
      # Decrease level by 1
      newValue <- level() - 1
      
      # Update value
      level(newValue)
      
      if (level() == 0) {
        # Reset selected category once returned to 'base' level
        Category_Selector$selected <- NULL
      } else {
        if (level() == 1) {
          check$value <- NULL
        }
        # Update current with previously selected
        Category_Selector$selected <-
          Category_Selector$previous[level()]
        Category_Selector$previous <-
          Category_Selector$previous[-level()]
      }
      
    }
    
  }, ignoreInit = TRUE)
  
  # Observe event for choosing GHG
  observeEvent(input$GHG_click, {
    ghg <- as.character(total_ghg$Gas[round(input$GHG_click$x)])
    
    if (!ghg %in% GHG_Selector$selected) {
      # Add GHG type if not already present
      GHG_Selector$selected <- c(GHG_Selector$selected, ghg)
    } else {
      # Remove GHG type if already present
      GHG_Selector$selected <-
        c(GHG_Selector$selected[-match(ghg, GHG_Selector$selected)])
    }
    
    # Update values to be highlighted
    if (is_empty(GHG_Selector$selected)) {
      # If none of the GHG are filtered for, all GHG should be highlighted
      GHG_Selector$toHighlight <- rep(TRUE, length(total_ghg$Gas))
    } else {
      GHG_Selector$toHighlight <-
        total_ghg$Gas %in% GHG_Selector$selected
    }
    
  }, priority = 1)
  
  # Reset GHG
  observeEvent(input$Reset_GHG,
               {
                 GHG_Selector$selected <- vector()
                 GHG_Selector$toHighlight <-
                   rep(TRUE, length(total_ghg$Gas))
               },
               ignoreInit = TRUE,
               priority = 0)
  
  # Reset Sector filters
  observeEvent(input$Reset_Sector, {
    # Reset level back to 0
    level(0)
    
    # Update Category_Selector values with empty values
    Category_Selector$selected <- NULL
    Category_Selector$previous <- vector()
    
    # Update check$value to be empty
    check$value <- NULL
  })
  
  # Observe event for TableOutput row clicked (only triggers in Table view)
  observeEvent(input$DataFrame_cell_clicked,
               {
                 # Obtain information on clicked cell
                 info = input$DataFrame_cell_clicked
                 
                 # Don't do anything (return nothing) when no info, or clicked cell doesn't match requirements
                 if (is.null(info$value) ||
                     info$col != 0 ||
                     info$row == (dim(Current_Summary$summary)[1] + 1))
                   return()
                 
                 # If valid cell clicked:
                 if (level() == 0) {
                   
                   # Obtain and assign selected bar
                   Category_Selector$selected <- info$value
                   
                   # Update dataframe based on selected sector
                   Sector_Frame$data <- Emission_year$data %>%
                     filter(Sector == Category_Selector$selected)
                   
                   # Update sector in reactiveValue 
                   Category_Selector$sector <-
                     as.character(Category_Selector$selected)
                   
                   # Increment level
                   level(level() + 1)
                   
                 } else {
                   
                   # Determine if 'check' has a value or not
                   if (is.null(check$value)) {
                     # Filter for sector using only layer in hierarchy if not
                     sector_level <- Sector_Frame$data %>%
                       filter(`Layer in hierarchy` == (level() + 1))
                   } else {
                     # Filter for sector using layer in hierarchy and link to crf import file
                     sector_level <- Sector_Frame$data %>%
                       filter(`Layer in hierarchy` == (level() + 1))
                     
                     sector_level <- sector_level[str_detect(sector_level[, 1], check$value),]
                   }
                   
                   if (!all(!duplicated(sector_level$`Name on tab`))) {
                     # Re-determine sector_level dataframe if there are duplicate `Name on tab` entries
                     sector_level <-
                       Sector_Frame$data[Sector_Frame$data[[10]] == isolate(level()) + 1 &
                                           substr(Sector_Frame$data[[1]],
                                                  1,
                                                  stri_locate_first_fixed(Sector_Frame$data[[1]], " ") - 1) %in% check$value, ]
                   }
                   
                   # Reorder sector_level such that it's sorted alphabetically (consistent with ggplot ordering)
                   if (!all(sector_level$Totals > 0)) {
                     sector_level <- sector_level %>%
                       changeOrder()
                   } else {
                     sector_level <- sector_level %>%
                       dplyr::arrange(`Link to CRF import file`)
                   }
                   
                   # Update previously selected and currently selected categories only if not on lowest level
                   if (sector_level[sector_level$`Name on tab` == info$value, ]$`Lowest level?` != "lowest") {
                     Category_Selector$previous <-
                       c(Category_Selector$previous,
                         as.character(Category_Selector$selected))
                     Category_Selector$selected <- info$value
                     
                     # Increment level
                     level(level() + 1)
                   }
                 }
                 
               },
               ignoreInit = TRUE,
               priority = 1)
  
  # Reactives (category_change and time_sector_change) ------------------------
  
  # Reactive for when we change the category
  category_change <- reactive({
    # Check if we're in the 1st layer
    if (level() <= 1) {
      # Filter for appropriate sector and acquire summary data
      emission_sector <- Sector_Frame$data %>%
        filter(`Layer in hierarchy` == 2)
      
      if (!all(sign(emission_sector$Totals) == sign(emission_sector$Totals[1]))) {
        emission_sector <- emission_sector %>%
          changeOrder()
      }
      emission_sector <- emission_sector %>%
        getSummarySectorBreakdown() %>%
        StartEnd()
    } else {
      # Set the substring to check for
      check$value <- substr(
        Category_Selector$selected,
        2,
        stri_locate_first_fixed(Category_Selector$selected, " ")[1] - 1
      )
      
      # Check for edge case where `Name on tab` doesn't have code despite not being lowest level
      if (is.na(isolate(check$value)) |
          is.na(str_match(isolate(check$value), "[1-6]\\.[\\w\\.]+"))) {
        # Update check$value if we're at this edge case
        check$value <-
          str_extract(Category_Selector$previous[length(Category_Selector$previous)], "[\\w\\.]+")
      }
      
      # Filter for appropriate subcategories and acquire summary data
      emission_sector <-
        Sector_Frame$data[Sector_Frame$data[[10]] == isolate(level()) + 1 &
                            str_detect(Sector_Frame$data[[1]], check$value),]
      
      # Catch issue when differentiating sectors using Roman numerals
      if (!all(!duplicated(emission_sector$`Name on tab`))) {
        # Re-determine emission_sector dataframe if there are duplicate `Name on tab` entries
        emission_sector <-
          Sector_Frame$data[Sector_Frame$data[[10]] == isolate(level()) + 1 &
                              substr(Sector_Frame$data[[1]],
                                     1,
                                     stri_locate_first_fixed(Sector_Frame$data[[1]], " ") - 1) %in% check$value, ]
      }
      
      # Transform dataframe such that it's usable for plotting
      if (!all(sign(emission_sector$Totals) == sign(emission_sector$Totals[1]))) {
        emission_sector <- emission_sector %>%
          changeOrder()
      } else {
        emission_sector <- emission_sector %>%
          dplyr::arrange(`Link to CRF import file`)
      }
      
      emission_sector <- emission_sector %>%
        getSummarySectorBreakdown() %>%
        StartEnd()
    }
    
    emission_sector
  })
  
  # Reactive for when we change the time sector (used for year graph)
  time_sector_change <- reactive({
    if (level() == 1) {
      # Check if we're in first level
      # Obtain only 1st level sectors and filter for desired
      time_sector <-
        time_series_clean[!duplicated(time_series_clean$Sector),] %>%
        filter(Sector == Sector_Frame$data[1, 12])
    } else {
      # Filter by the exact Name on tab
      time_sector <- time_series_clean %>%
        filter(`Name on tab` == as.character(Category_Selector$selected))
    }
    
    time_sector
  })
  
  # Reactive for when we change the time sector with GHG filters
  time_sector_GHG <- reactive({
    if (level() == 1) {
      # Check if we're in the first level
      
      # Obtain time series for 1st level and select only desired columns
      time_sector <- emissions %>%
        filter(`Layer in hierarchy` == 1, Sector == Sector_Frame$data[1, 12]) %>%
        select(all_of(GHG_Selector$selected), Year)
    } else {
      # Filter by the exact Name on tab
      time_sector <- emissions %>%
        filter(`Name on tab` == as.character(Category_Selector$selected)) %>%
        select(all_of(GHG_Selector$selected), Year)
    }
    
    time_sector <- time_sector %>%
      dplyr::arrange(-row_number())
    time_sector
  })
  
  # Reactive for when we change the year chosen at the base level
  year_change <- reactive({
    # Update Emission_year reactive with new year selected
    Emission_year$data <- emissions %>%
      filter(Year == Year_Selector$selected)
    
    # Update summary emission based on new year
    summary_emission <- Emission_year$data %>%
      filter(`Layer in hierarchy` == 1) %>%
      getSummary() %>%
      StartEnd()
  
    summary_emission
  })
  
  #Reactive for when we change the GHGs chosen
  GHG_change <- reactive({
    # Get list of currently 'active' GHG to filter for
    filter_for <- GHG_Selector$selected
    
    # Apply a different function based on the level in the hierarchy we're currently at
    if (level() == 0) {
      # Base level
      filtered_GHG <- Emission_year$data %>%
        assignSector() %>%
        select(colnames(Emission_year$data[, c(1, 2)]),
               all_of(filter_for),
               10:13)
      
    } else if (level() == 1) {
      # 1st level (chosen Sector)
      filtered_GHG <- Sector_Frame$data %>%
        select(colnames(Sector_Frame$data[, c(1, 2)]),
               all_of(filter_for),
               10:13) %>%
        filter(`Layer in hierarchy` == 2)
      
    } else {
      # Other levels (deeper dive into different sectors)
      
      # Filter based on the section we're in
      filtered_GHG <- Sector_Frame$data %>%
        select(colnames(Sector_Frame$data[, c(1, 2)]),
               all_of(filter_for),
               10:13)
      
      # Filter through correct subcategories
      filtered_GHG <-
        filtered_GHG[filtered_GHG[[(3 + length(GHG_Selector$selected))]] == level() + 1 &
                       str_detect(filtered_GHG[[1]], check$value),]
    }
    
    col_num <- dim(filtered_GHG)[2]
    
    # Reformat dataframe to obtain summary data
    filtered_GHG <- add_column(filtered_GHG,
                               Totals = rowSums(filtered_GHG[, -c(1:2, col_num -
                                                                    3, col_num - 2, col_num - 1, col_num),
                                                             drop = FALSE]),
                               .after = "Name on tab")
    
    # Use appropriate functions to obtain summary data for plotting
    if (level() == 0) {
      filtered_GHG <- filtered_GHG %>%
        getSummary() %>%
        StartEnd()
    } else {
      filtered_GHG <- filtered_GHG %>%
        getSummaryGHG(length(GHG_Selector$selected)) %>%
        StartEnd()
    }
    
    filtered_GHG
  })
  
  # Reactive to get dataframe required for Table percentage changes
  YearComp_change <- reactive({
    
    # Determine whether a GHG filter is applied or not 
    if (!is_empty(GHG_Selector$selected)) {
      
      # Apply initial filter (applicable for all cases)
      Comparison <-  emissions %>%
        filter(Year == input$YearComp,
               `Layer in hierarchy` == isolate(level()) + 1)
      
      # Filter based on layer in hierarchy
      if (isolate(level()) == 1) {
        
        # Only filter by Sector if 1st level
        Comparison <-  Comparison %>%
          filter(Sector == isolate(Category_Selector$sector))
        
      } else if (isolate(level()) > 1) {
        
        # Filter by Sector and `Name on tab` if beyond 1st level
        Comparison <- Comparison %>%
          filter(Sector == isolate(Category_Selector$sector),
                 str_detect(`Name on tab`, isolate(check$value)))
        
        # Check if there are duplicated observations (generally found in lowest layer)
        if (!all(!duplicated(Comparison$`Name on tab`))) {
          
          # Re-filter for correct observations if so
          Comparison <- Comparison %>%
            filter(substr(
              `Link to CRF import file`,
              1,
              stri_locate_first_fixed(Comparison$`Link to CRF import file`, " ") - 1
            ) %in% check$value)
        }
      }
      
      # Reformat Comparison to be used 
      Comparison <- Comparison %>%
        select(GHG_Selector$selected) %>%
        mutate(Totals = rowSums(.)) %>%
        select(Totals)
      
      if (level() == 0) {
        Comparison <- data.frame(Totals = Comparison[c(1, 2, 3, 5, 6, 4),])
      }
      
    } else {
      # No GHG filters, apply other standard filters
      # Initial year filter
      Comparison <- emissions %>%
        filter(Year == input$YearComp)
      
      # Filter based on layer in hierarchy
      if (level() == 0) {
        
        # Base level
        Comparison <- Comparison %>% 
          filter(`Layer in hierarchy` == 1)
      } else {
        
        # Layers beyond base, filter by `Name on tab` 
        Comparison <- Comparison %>% 
          filter(`Name on tab` %in% isolate(Current_Summary$summary$`Name on tab`))
        
        # Check for duplicated values
        if (!all(!duplicated(Comparison$`Name on tab`))) {
          
          # Re-filter if duplicates exist
          Comparison <- Comparison %>% 
            filter(substr(`Link to CRF import file`, 
                          1, 
                          stri_locate_first_fixed(Comparison$`Link to CRF import file`, " ") - 1) %in% check$value)
        }
      }
      
      # Reformat Comparison 
      Comparison <- Comparison %>% 
        getSummary() %>%
        select(Totals)
    }
    
    # Append new row detailing totals onto Comparison
    Comparison %>%
      rbind(data.frame(Totals = sum(.$Totals)))
  })
  
  # Output plots ------------------------------------------------------------
  
  # Output plot for main emissions graph
  output$Emissions <- renderPlot({
    # print("Emission")
    # Apply different plotting command based on level of hierarchy we're currently at
    if (level() <= 0) {
      # Base level
      
      if (!is.null(Year_Selector$selected)) {
        # Check if year has changed from default (2018)
        summary_emission <- year_change()
      }
      
      if (!is_empty(GHG_Selector$selected)) {
        # Check if GHG filter exists
        summary_emission <- GHG_change()
      }
      
      # Begin formatting ggplot
      e <- summary_emission %>%
        ggplot(aes(x = Sector,
                   y = Start,
                   fill = Sector)) +
        geom_crossbar(aes(ymin = Start, ymax = End),
                      fatten = 0,
                      position = position_dodge()) +
        labs(title = "Emissions from Sectors",
             y = "Emissions CO2-e (kilotonnes)") +
        theme_mfe() +
        scale_fill_mfe(direction = 1) +
        scale_x_discrete(expand = c(0, 0)) +
        geom_hline(yintercept = max(summary_emission$End),
                   linetype = "dashed") +
        geom_text(aes(x = 1, y = max(End)), label = "Net", vjust = -1) +
        geom_hline(yintercept = summary_emission$End[6], linetype = "dashed") +
        geom_text(aes(x = 1, y = End[6]), label = "Gross", vjust = -1)
      
    } else {
      # Non-base level
      # Check if year is different from previous/default
      if (!is.null(Year_Selector$selected)) {
        if (Year_Selector$selected != currentYear) {
          # Update year for emission data
          Emission_year$data <- emissions %>%
            filter(Year == Year_Selector$selected)
          
          # Update sector data for the new year
          Sector_Frame$data <- Emission_year$data %>%
            filter(Sector == Category_Selector$sector)
          
          # Update the current year
          currentYear <<- Year_Selector$selected
        }
      }
      
      # Get appropriate sub category dataframe for the given year
      # Check if any filters for GHG
      if (!is_empty(GHG_Selector$selected)) {
        # If so, update dataframe
        summary_emission <- GHG_change()
      } else {
        summary_emission <- category_change()
      }
      
      title <-
        getTitle(as.character(Category_Selector$selected),
                 isolate(level()))
      
      # Begin formatting ggplot
      e <- summary_emission %>%
        ggplot(aes(x = `Name on tab`,
                   y = Start,
                   fill = `Name on tab`)) +
        geom_crossbar(aes(ymin = Start,
                          ymax = End),
                      fatten = 0,
                      position = position_dodge()) +
        labs(
          title = paste("Emissions from", title),
          y = "Emissions CO2-e (kilotonnes)",
          x = Category_Selector$sector
        ) +
        theme_mfe() +
        scale_fill_mfe(direction = 1) +
        geom_text(
          aes(
            y = End,
            label = paste0(round(Totals / max(End), 3) * 100, '%'),
            fontface = "bold"
          ),
          position = position_dodge(width = 0.9),
          vjust = -0.5,
          size = 8
        ) +
        scale_x_discrete(
          limits = summary_emission$`Name on tab`,
          expand = c(0, 0),
          labels = str_remove(
            str_sub(summary_emission$`Name on tab`, 2,-2),
            "\\d[\\d\\.\\w]+[\\s]+"
          )
        )
    }
    
    # Update Current_Summary reactiveValue with new summary_emission
    Current_Summary$summary <- summary_emission
    
    # Finish ggplot
    e + theme(
      plot.title = element_text(hjust = 0.5, size = 18),
      legend.position = 'none',
      axis.text.x = element_text(angle = 45, hjust = 1),
      axis.title.x = element_text(size = 16),
      axis.title.y = element_text(size = 16)
    ) +
      scale_y_continuous(expand = expansion(mult = c(0, 0.1)),
                         breaks = pretty(c(
                           min(summary_emission$Start,
                               summary_emission$End),
                           max(summary_emission$End,
                               summary_emission$Start)
                         ),
                         n = 10))
  })
  
  # Output of dataframe corresponding to the current graph
  output$DataFrame <- renderDT({
    if (level() <= 0) {
      # Base level
      
      if (!is.null(Year_Selector$selected)) {
        # Check if year has changed from default (2018)
        summary_emission <- year_change()
        
        # Update gross emissions value based on year
        gross$value <-
          sum(summary_emission[summary_emission$Totals > 0, ]$Totals)
      }
      
      if (!is_empty(GHG_Selector$selected)) {
        # Check if GHG filter exists
        summary_emission <- GHG_change()
      }
      
    } else {
      # Non-base level
      if (!is.null(Year_Selector$selected)) {
        if (Year_Selector$selected != currentYear) {
          # Update year for emission data
          Emission_year$data <- emissions %>%
            filter(Year == Year_Selector$selected)
          
          # Update sector data for the new year
          Sector_Frame$data <- Emission_year$data %>%
            filter(Sector == Category_Selector$sector)
          
          # Update the current year
          currentYear <<- Year_Selector$selected
          
          # Update gross emissions value based on new year
          gross$value <- Emission_year$data %>%
            filter(`Layer in hierarchy` == 1) %>%
            {
              sum(.[.$Totals > 0,]$Totals)
            }
        }
      }
      
      # Compute total sector emission (Used for Percentage (Sector))
      s_Emission <- Sector_Frame$data %>%
        filter(`Layer in hierarchy` == 1) %>%
        select(Totals) %>%
        as.numeric()
      
      # Get appropriate sub category dataframe for the given year
      summary_emission <- category_change()
      
      # Check if any filters for GHG
      if (!is_empty(GHG_Selector$selected)) {
        # If so, update dataframe
        summary_emission <- GHG_change()
      }
    }
    
    # Update Current_Summary reactiveValue with new summary_emission
    Current_Summary$summary <- summary_emission
    
    # Create df_output dataframe to be used for the renderDT output
    df_output <- summary_emission %>%
      # Get required columns based on layer in hierarchy
      {
        if (level() == 0)
          select(., Sector, Totals)
        else
          select(., `Name on tab`, Totals)
      } %>%
      # Compute new required columns
      mutate(Totals = round(summary_emission$Totals, 2)) %>%
      mutate(`Percentage (gross)` =
               round(.$Totals / isolate(gross$value) * 100, 1)) %>%
      {
        # Append a new row detailing Totals for each column based on layer in hierarchy
        if (level() == 0)
          rbind(
            .,
            data.frame(
              Sector = "Total",
              Totals = round(sum(.$Totals), 2),
              Percent = sum(.[.$Totals > 0, ]$`Percentage (gross)`)
            ) %>%
              dplyr::rename(`Percentage (gross)` = Percent)
          )
        else
          rbind(
            .,
            data.frame(
              Name = "Total",
              Totals = round(sum(.$Totals), 2),
              Percent = sum(.$`Percentage (gross)`)
            ) %>%
              dplyr::rename(`Percentage (gross)` = Percent) %>%
              dplyr::rename(`Name on tab` = Name)
          )
      } %>%
      dplyr::rename(`Emissions (kt CO2-e)` = Totals) %>%
      mutate(`Percentage (gross)` = paste0(as.character(`Percentage (gross)`), "%"))
    
    # Make naming/string adjustments based on the level we're at
    if (level() == 0) {
      df_output[df_output$Sector == "LULUCF",]$`Percentage (gross)` <- ""
    } else {
      # Add colunn for Percentage (Sector) once beyond base level
      df_output <- df_output %>%
        mutate(PSector = paste0(round((`Emissions (kt CO2-e)` / s_Emission) * 100, 2
        ), "%"))
      
      # Rename above column
      names(df_output)[4] <- paste0("Percentage (", Category_Selector$sector, ")")
    }
    
    # Get dataframe for comparison percentage change column
    Comparison_Frame <- YearComp_change()
    
    # Add new column onto df_output
    df_output <- df_output %>%
      mutate(Comparison = as.factor(round(((df_output$`Emissions (kt CO2-e)` - Comparison_Frame$Totals) / abs(Comparison_Frame$Totals)
      ) * 100,
      1))) %>%
      mutate(Comparison = paste0(as.character(Comparison), "%"))
    
    # Rename column 
    if (is.null(Year_Selector$selected)) {
      names(df_output)[names(df_output) == "Comparison"] <-
        paste0("Change from ", input$YearComp, " to 2018")
    } else {
      names(df_output)[names(df_output) == "Comparison"] <-
        paste0("Change from ",
               input$YearComp,
               " to ",
               Year_Selector$selected)
      
    }
    
    # Make adjustments to output when Percentage (Sector) and Percentage(gross) is 0 (due to rounding error) 
    df_output[,3] <- df_output[,3 ] %>% 
      str_replace("^0%$", "< 0.1%")
    
    df_output[,4] <- df_output[,4] %>%
      str_replace("^0%$", "< 0.1%")
    
    # Return df_output to renderDT as output with few parameters
    df_output %>%
      datatable(selection = 'none', rownames = FALSE) %>%
      formatStyle(1, cursor = 'pointer')
  })
  
  # Output plot for time series of total emissions
  output$Year <- renderPlot({
    # Check if any category is chosen
    if (is.null(Category_Selector$selected)) {
      # No category chosen
      
      # Check if any filtering required for GHG
      if (!is_empty(GHG_Selector$selected)) {
        # If so, filter for required GHGs
        t <- emissions %>%
          filter(`Layer in hierarchy` == 0) %>%
          select(all_of(GHG_Selector$selected), Year)
        
        # Create new Emissions column for plotting purposes
        t <- t %>%
          mutate(Emissions = rowSums(t[, -dim(t)[2], drop = FALSE])) %>%
          dplyr::arrange(-row_number())
      } else {
        # If not, use imported time series summary dataframe
        t <- time_series_summary
      }
      
    } else {
      # A category is chosen
      
      # Check for any filtering requirements for GHG
      if (!is_empty(GHG_Selector$selected)) {
        # If so, filter for required GHGs
        time_sector <- time_sector_GHG()
        
        # Create new Emissions columns for plotting purposes
        time_sector <- time_sector %>%
          mutate(Emissions = rowSums(time_sector[,-dim(time_sector)[2], drop = FALSE]))
        
      } else {
        # If not, filter for desired subcategory
        time_sector <- time_sector_change() %>%
          dplyr::arrange(-row_number())
        
        # Restructure dataframe for plotting
        time_sector <-
          as.data.frame(t(as.matrix(time_sector[, 4:32])))
        time_sector$Year <- as.numeric(row.names(time_sector))
        names(time_sector)[1] <- "Emissions"
        
      }
      
      t <- time_sector
    }
    
    # Create ggplot based on required dataframe
    t %>%
      ggplot(aes(
        x = Year,
        y = Emissions,
        fill = ifelse(Year_Selector$toHighlight, yes = "Yes", no = "No")
      )) +
      geom_bar(stat = "identity",
               width = 0.5) +
      labs(title = "Select Year",
           y = "Emissions (kt CO2-e)") +
      scale_fill_manual(values = c("Yes" = "mediumvioletred", "No" = "plum2")) +
      theme_mfe() +
      theme(
        plot.title = element_text(hjust = 0.5, size = 16),
        legend.position = 'none',
        axis.text.x = element_text(angle = 0),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14)
      ) +
      scale_x_continuous(expand = c(0, 0),
                         breaks = pretty(c(1990, 2018),
                                         n = 5)) +
      scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
    
    # t
  })
  
  # Output plot for GHG breakdowns
  output$GHG <- renderPlot({
    # Check if a Sector is chosen
    if (!is.null(Category_Selector$selected)) {
      # If so, update summary with new category/sub category
      summary_emission <- category_change()
      
      # Update ghg dataframe to match new emission summary
      total_ghg <- getGHG(summary_emission)
      
    } else if (!is.null(Year_Selector$selected)) {
      # Check if year has changed from previous
      if (Year_Selector$selected != currentYear) {
        # If so, update summary with new year
        summary_emission <- year_change()
        
        # Update ghg dataframe to match new emission summary
        total_ghg <- getGHG(summary_emission)
      }
    }
    
    # Plotting function
    total_ghg %>% filter(Gas != "Totals") %>%
      ggplot(aes(
        x = Gas,
        y = Emission,
        fill = ifelse(GHG_Selector$toHighlight,
                      yes = "Yes",
                      no = "No")
      )) +
      geom_bar(stat = "identity") +
      labs(title = "Select Greenhouse Gas",
           x = "Gas Type",
           y = "Emissions (kt CO2-e)") +
      scale_fill_manual(values = c("Yes" = "green4",
                                   "No" = "palegreen3")) +
      theme_mfe() +
      theme(
        plot.title = element_text(hjust = 0.5, size = 16),
        legend.position = 'none',
        axis.text.x = element_text(angle = 0),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14)
      ) +
      scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
      scale_x_discrete(expand = c(0, 0))
  })
  
  # Output textInput for showing which Year is currently selected
  output$Year_value <- renderUI({
    textInput(
      inputId = "Year_label",
      label = "Selected Year ",
      value = Year_Selector$selected,
      placeholder = "Default Year - 2018"
    )
  })
  
  # Output selectInput for showing which GHG/s are filtered for
  output$GHG_selected <- renderUI({
    selectInput(
      inputId = "GHG_label",
      label = NULL,
      choices = c("Select GHG to filter for" = "", GHG_Selector$selected),
      selected = GHG_Selector$selected,
      multiple = TRUE,
      width = '100%'
    )
  })
  
  # Output selectInput for tracing the sectors we've gone down
  output$Sector_trace <- renderUI({
    selectInput(
      inputId = "SectorTrace_label",
      label = NULL,
      choices = c(
        "Trace for Sectors" = "" ,
        Category_Selector$previous,
        as.character(Category_Selector$selected)
      ),
      selected = c(
        Category_Selector$previous,
        as.character(Category_Selector$selected)
      ),
      multiple = TRUE,
      width = '100%'
    )
  })
  
  # Output for registering hover over main plot
  output$toolTip <- renderUI({
    hover <- input$Emissions_hover
    req(!is.null(hover))
    if (level() == 0) {
      y <-
        Current_Summary$summary[Current_Summary$summary$Sector == Current_Summary$summary$Sector[round(hover$x)],]
    } else {
      y <-
        Current_Summary$summary[Current_Summary$summary$`Name on tab` == Current_Summary$summary$`Name on tab`[round(hover$x)],]
    }
    
    req(nrow(y) != 0)
    verbatimTextOutput("values")
    
  })
  
  # Output the values that correspond to the bar that is hovered over
  output$values <- renderPrint({
    hover <- input$Emissions_hover
    req(!is.null(hover))
    if (level() == 0) {
      y <-
        Current_Summary$summary[Current_Summary$summary$Sector == Current_Summary$summary$Sector[round(hover$x)],]
    } else {
      y <-
        Current_Summary$summary[Current_Summary$summary$`Name on tab` == Current_Summary$summary$`Name on tab`[round(hover$x)],]
    }
    
    req(nrow(y) != 0)
    round(y$Totals, 2)
  })
}

# Run the application
shinyApp(ui = ui, server = server)