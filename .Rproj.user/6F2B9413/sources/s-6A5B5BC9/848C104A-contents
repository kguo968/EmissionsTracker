sectorAllocate <- function(x) {
  # Helper function for allocating the Sector for each observation
  sectorName <- switch(as.character(x),
                       "1" = "Energy",
                       "2" = "Industrial Processes and Product Use",
                       "3" = "Agriculture",
                       "4" = "LULUCF",
                       "5" = "Waste",
                       "6" = "Tokelau",
                       "-" = "LULUCF",
                       "S" = "Totals") 
}

getSheet <- function() {
  # Function which extracts all the useful observations from the provided excel file
  sheets <- excel_sheets("Data/Sent to Datacom 25 March 2020 - Emissions data 1990-2018 for Emissions Tracker 2020 submission version T from CRF 13 Feb 2020.xlsx")[-c(1,31)]
  list_emissions <- lapply(sheets, function(x) read_excel("Data/emissions data.xlsx", sheet = x,
                                                          range = c("A11:AO1072"))[-c(178:261,300:325,539,1053:1056),
                                                                                   c(1:4,11, 18, 26, 27, 29, 40, 41)])
  
  for (i in 1:length(sheets)) {
    list_emissions[[i]] <- cleanSheet(list_emissions[[i]])
    list_emissions[[i]]$Year <- as.double(sheets[i])
    }
    
  emissions <- rbind.fill(list_emissions)  
  save(emissions, file = "emissions.rda")
} 

assignSector <- function(x) {
  # Assigns the numeric value for an observations
  summary_emission <- x %>% filter(`Link to CRF import file` == "1"|
                                     `Link to CRF import file` == "2"|
                                     `Link to CRF import file` == "3"|
                                     `Link to CRF import file` == "4"|
                                     `Link to CRF import file` == "5"|
                                     `Link to CRF import file` == "6")
  summary_emission
}

getSummary <- function(x) {
  summary <- x[,3:(dim(x)[2]-1)]
  factor_order <- c("Energy", "Industrial Processes and Product Use", "Agriculture","Waste","Tokelau","LULUCF")
  summary <- summary %>% mutate(Sector = factor(Sector, levels=factor_order)) %>% arrange(Sector)
  summary
}

getSummarySectorBreakdown <- function(x) {
  summary <- x[,2:9]
  summary <- summary[, c(2:8,1)]
}

getSummaryGHG <- function(x, num) {
  # browser()
  summary <- x[,2:(3+num)]
  summary <- summary[,c(2:(2+num), 1)]
}

StartEnd <- function(x) {
  row_num <- dim(x)[1]
  col_num <- dim(x)[2]
  
  # Set the 'Start' values for each of the sectors
  x$Start <- 0 
  
  if (row_num == 1) {
    x$End <- x$Totals
    
  } else {
    
    for (i in 2:row_num) {
      x[i,(col_num+1)] <- x[i-1,(col_num+1)] + x[i-1,1]
    }
    
    # Set the 'End' values for each of the sectors
    x$End <- 0
    
    for (j in 1:(row_num-1)) {
      x[j,col_num+2] <- x[j+1,col_num+1]
    }
    
    x[row_num,col_num+2] <- x[row_num-1, col_num+2] + x[row_num,1] 
  }
  
  x
}

getGHG <- function(x) {
  total_ghg <- colSums(x[,2:7]) %>% as.data.frame()
  total_ghg$Gas <- row.names(total_ghg)
  
  # Rename column
  names(total_ghg)[1] <- "Emission"
  
  # Reorder the factor to match the current tracker
  ghg_factor_order <- c("Total CO2", "Total CH4", "Total N2O", "HFCs","PFCs","SF6","Totals")
  total_ghg <- total_ghg %>% mutate(Gas = factor(Gas, levels = ghg_factor_order)) %>% arrange(Gas)
  total_ghg
}

cleanSheet <- function(x) {
  emissions <- x
  col_len <- dim(emissions)[2]
  emissions <- emissions[-2,]
  emissions[emissions=="Exclude"] <- '0'
  if (col_len == 11) {
    emissions$`Lowest level?`[is.na(emissions$`Lowest level?`)] <- "False"
    emissions[, -c(1,2,11)] <- lapply(emissions[,-c(1,2,11)], function(x) unlist(as.numeric(x)))  
  } else {
    emissions[, -c(1,2)] <- lapply(emissions[,-c(1,2)], function(x) unlist(as.numeric(x)))
  }
  
  emissions[rowSums(is.na(emissions)) > 0, 4:9] <- 0
  emissions <- emissions[apply(emissions[,-c(1:2, 10, 11)], 1, function(x) !all(x==0)), ]
  emissions[,col_len+1] <- apply(emissions[,1], 1, function(x) substr(x,1,1))
  names(emissions)[3] <- "Totals"
  names(emissions)[col_len+1] <- "Sector"
  for (i in 1:dim(emissions)[1]) {
    emissions[i, col_len+1] <- (sectorAllocate(emissions[i,col_len+1]))
  }
  emissions
}

timeSummary <- function(x) {
  time_series_summary <- as.data.frame(t(as.matrix(x[1,4:32])))
  time_series_summary$Year <- as.double(row.names(time_series_summary))
  names(time_series_summary)[1] <- "Emissions"
  time_series_summary$Emissions <- as.numeric(as.character(time_series_summary$Emissions))
  time_series_summary
}

fixAgricultureEmissions <- function(emissions) {
  
  name <- colnames(emissions)[1]
  
  # Add .1 to all 'Link to CRF import file' observations starting with 3.A
  emissions <- emissions %>% 
    separate(`Link to CRF import file`, into = c("Code", "Word"), sep = " ", extra = "merge", fill = "right") %>%
    mutate(Code = ifelse(substr(Code, 1, 3) == "3.A",
                         paste0("3.A.1", substr(Code, 4, length(Code))), 
                         Code)) %>% 
    replace_na(list(Word = "")) %>% 
    unite("Link to CRF import file", c(Code, Word), sep = " ")
  
  emissions$`Link to CRF import file` = str_trim(emissions$`Link to CRF import file`, side = c("right"))

  # Replace all '3.1' observations (should just be 3.1 Livestock) with 3.A
  # Linke to CRF import file change
  emissions$`Link to CRF import file` <- stri_replace_all_regex(emissions$`Link to CRF import file`,
                                                                "^3.1",
                                                                replacement = "3.A")
  
  # Name on tab change
  emissions$`Name on tab` <- stri_replace_all_regex(emissions$`Name on tab`,
                                                    "^\\[3\\.\\d",
                                                    replacement = "[3.A")
  
  # Update 3.B with correct name
  # Link to CRF import file change
  emissions$`Link to CRF import file` <- stri_replace_all_regex(emissions$`Link to CRF import file`,
                                                                "^3.B",
                                                                replacement = "3.A.2")
  
  # Name on tab change
  emissions$`Name on tab` <- stri_replace_all_regex(emissions$`Name on tab`,
                                                    "^\\[3\\.[A-B][\\.\\d]*",
                                                    replacement = paste0("[",emissions$`Link to CRF import file`))
  
  emissions
}

fixAgricultureTime <- function(time) {
  
  time <- time %>%
    separate(`Link to CRF import file`, into = c("Code", "Word"), sep = " ", extra = "merge", fill = "right") %>%
    mutate(Code = ifelse(substr(Code, 1, 3) == "3.A",
                         paste0("3.A.1", substr(Code, 4, length(Code))),
                         Code)) %>%
    replace_na(list(Word = "")) %>%
    unite(`Link to CRF import file`, c(Code, Word), sep = " ")
  
  time$`Link to CRF import file` <- str_trim(time$`Link to CRF import file`)
  
  time$`Link to CRF import file` <- stri_replace_all_regex(time$`Link to CRF import file`,
                                                           "^3.1",
                                                           replacement = "3.A")
  
  time$`Name on tab` <- stri_replace_all_regex(time$`Name on tab`,
                                               "^\\[3\\.\\d",
                                               replacement = "[3.A")
  
  time$`Link to CRF import file` <- stri_replace_all_regex(time$`Link to CRF import file`,
                                                           "^3.B",
                                                           replacement = "3.A.2")
  
  time$`Name on tab` <- stri_replace_all_regex(time$`Name on tab`,
                                               "^\\[3\\.[A-B][\\.\\d]*",
                                               replacement = paste0("[",time$`Link to CRF import file`))
  
  time
}

changeOrder <- function(x) {
  x <- x %>% 
    split(x$Totals < 0)
  
  x[[1]] <- dplyr::arrange(x[[1]], `Name on tab`)
  x[[2]] <- dplyr::arrange(x[[2]], `Name on tab`)
  
  x <- rbind.fill(x)
  
  x
}

getTitle <- function(x, level) {
  if (level > 1) {
    x <- str_remove(str_sub(x, 2, -2),"\\d[\\d\\.\\w]+[\\s]+")
  }
  
  x
}